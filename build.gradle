plugins {
    id 'org.springframework.boot' version '3.1.3'
    id 'org.sonarqube' version '3.3'
}

repositories {
    mavenCentral()
}

ext {
    pmdRules = files("config/pmd/ruleset.xml")
    testMySQLUser = UUID.randomUUID().toString().substring(0, 4)
    testMySQLPassword = UUID.randomUUID().toString()
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "basic-multiproject"
        property "sonar.projectName", "basic-multiproject"
    }
}

subprojects {
    apply plugin: "java"
//    apply plugin: "checkstyle"
    apply plugin: "jacoco"
    apply plugin: "pmd"
    apply plugin: "idea"

    group = 'org.example'
    version = '1.0-SNAPSHOT'

    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    dependencies {
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.28'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.28'

        testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.28'
        testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.28'

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.0'

        testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '3.1.3'
        testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                excludes = [
                        'com.somecompany.project.*Application',
                        'com.somecompany.project.*Config',
                        'com.somecompany.project.*Configuration',
                        'com.somecompany.project.*Properties',
                        'com.somecompany.project.*.message.*',
                        'com.somecompany.project.*.dm.*',
                        'com.somecompany.project.*.dto.*'
                ]
                limit {
                    minimum = 1.0
                }
            }
        }
    }

    jacocoTestReport {
        dependsOn(test)
        finalizedBy(jacocoTestCoverageVerification)
    }

    pmd {
        consoleOutput = true
        ruleSets = []
        ruleSetFiles = pmdRules
        rulesMinimumPriority = 5
    }

    test {
        useJUnitPlatform()
    }

    tasks.register("prepareKotlinBuildScriptModel") {}
}
